@page
@model ClinicalSummaryGenerator.Pages.IndexModel
@{
    ViewData["Title"] = "Clinical Summary Generator";
}

<h1>Clinical Summary Generator</h1>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @Model.ErrorMessage
    </div>
}

<br />
<div class="alert alert-info" role="alert">
    @* <p><strong>Disclaimer:</strong> This tool is for educational purposes only and should not be used for actual medical diagnosis or treatment.</p> *@
    @* <strong>Note:</strong> This is a demo version. The model may not be able to summarize all clinical notes accurately.
    <br /> *@
    <strong>How to use:</strong>
    <ul>
        <li>Upload a file containing your clinical notes, or type or paste notes in the text area below</li>
        <li>Select the summary style you prefer (Brief, Detailed, or SOAP format)</li>
        <li>Click "Generate Summary"</li>
    </ul>
</div>

<form method="post" enctype="multipart/form-data">
    <div class="form-group mt-3" style="margin-bottom: 3rem;">
        <label for="ClinicalNoteFile">Upload file (.txt or .docx)</label>
        <input type="file" name="ClinicalNoteFile" accept=".txt,.docx" class="form-control" />
        <div style="margin-bottom: 1rem;"></div>
        <button type="submit" name="action" value="load" class="btn btn-outline-secondary me-2">Load File</button>
        <small class="form-text text-muted">Uploading a file will overwrite any text entered below.</small>
        <hr />
    </div>
</form>

<form method="post" id="search-form">
    <div>
        <label for="SummaryStyle">Summary Style:</label>
        <select asp-for="SummaryStyle">
            <option value="brief">Brief</option>
            <option value="detailed">Detailed</option>
            <option value="soap">SOAP</option>
            <option value="structured">Structured Extraction</option>
            <option value="rawjson">Structured Extraction (JSON)</option>
        </select>
    </div>

    <div style="margin-top: 1rem;">
        <label for="ClinicalText">Clinical Note:</label><br />
        <textarea asp-for="ClinicalText" rows="10" cols="100" maxlength="@Model.ClinicalTextMaxLength" id="clinical-note-text"></textarea>
        <div class="text-muted small">
            <span id="char-count">0</span> / @Model.ClinicalTextMaxLength characters
        </div>

    </div>

    <button type="submit" style="margin-top: 1rem;" id="search-button" name="action" value="summarize">
        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true" id="search-spinner"></span>
        <span id="search-button-text">Generate Summary</span>
    </button>
</form>

@if (Model.Summary != null)
{
    <hr />
    <br />
    <h3>@Model.SummaryStyleLabels[Model.SummaryStyle] Summary:</h3>

    <div id="summary-output" class="border rounded bg-light p-3 mt-4 shadow">
        @if (Model.SummaryStyle == "brief")
        {
            var lines = Model.Summary?.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            if (lines is not null && lines.Any())
            {
                <ul>
                    @foreach (var line in lines)
                    {
                        <li>@line.TrimStart('-', '•', ' ')</li>
                    }
                </ul>
            }
            else
            {
                <pre style="white-space: pre-wrap;">@Model.Summary</pre>
            }
        }
        else if (Model.SummaryStyle == "soap")
        {
            var sections = Model.Summary?.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            foreach (var section in sections ?? Enumerable.Empty<string>())
            {
                var trimmed = section.Trim();
                if (trimmed.StartsWith("Subjective:", StringComparison.OrdinalIgnoreCase) ||
                    trimmed.StartsWith("Objective:", StringComparison.OrdinalIgnoreCase) ||
                    trimmed.StartsWith("Assessment:", StringComparison.OrdinalIgnoreCase) ||
                    trimmed.StartsWith("Plan:", StringComparison.OrdinalIgnoreCase))
                {
                    var idx = trimmed.IndexOf(':');
                    if (idx > 0)
                    {
                        <h5 class="mt-3">@trimmed[..idx]</h5>
                        <p>@trimmed[(idx + 1)..].Trim()</p>
                    }
                    else
                    {
                        <p>@trimmed</p>
                    }
                }
                else
                {
                    <p>@trimmed</p>
                }
            }
        }
        else if (Model.SummaryStyle == "detailed")
        {
            <pre style="white-space: pre-wrap;">@Model.Summary</pre>
        }
        else if (Model.SummaryStyle == "structured" && Model.Structured != null)
        {
            <h5 class="mt-3">Diagnoses</h5>
            <ul>
                @foreach (var item in Model.Structured.Diagnoses)
                {
                    <li>@item</li>
                }
            </ul>

            <h5 class="mt-3">Medications</h5>
            <ul>
                @foreach (var item in Model.Structured.Medications)
                {
                    <li>@item</li>
                }
            </ul>

            <h5 class="mt-3">Plan</h5>
            <ul>
                @foreach (var item in Model.Structured.Plan)
                {
                    <li>@item</li>
                }
            </ul>
        }
        else if (Model.SummaryStyle == "rawjson")
        {
            <pre class="border rounded bg-light p-3 mt-3" style="white-space: pre-wrap;" id="summary-output-json">@Model.Summary</pre>
        }
        else
        {
            <p>@Model.Summary</p>
        }
    </div>
    
    <div class="mb-2" style="margin-top: 1rem;">
        <button class="btn btn-outline-secondary btn-sm d-inline-flex align-items-center" onclick="copySummary()" id="copy-btn">
            <i class="bi bi-clipboard me-2" id="copy-icon"></i>
            <span id="copy-text">Copy Summary to Clipboard</span>
        </button>
        <span id="copy-feedback" class="text-success ms-2" style="display: none;">Copied!</span>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('search-form');
            const button = document.getElementById('search-button');
            const spinner = document.getElementById('search-spinner');
            const buttonText = document.getElementById('search-button-text');

            if (form && button && spinner) {
                form.addEventListener('submit', function() {
                    button.disabled = true;

                    // Show the spinner
                    spinner.classList.remove('d-none');
                    
                    if (buttonText) {
                         buttonText.innerText = 'Working...'; // Or hide it: buttonText.classList.add('d-none');
                         @* buttonText.classList.add('d-none'); // Alternatively, hide the button text *@
                    }
                });
            }
        });
    </script>

    <script>
        // ===============================================================================
        // Update the character count in the textarea as the user types.
        const clinicalNoteTextArea = document.getElementById('clinical-note-text');
        const charCount = document.getElementById('char-count');

        function updateCharacterCount() {
            const currentText = clinicalNoteTextArea.value;
            const currentLength = currentText.length;
            charCount.textContent = currentLength;
        }

        // The 'input' event fires every time the value of the textarea changes (typing, pasting, etc.)
        clinicalNoteTextArea.addEventListener('input', updateCharacterCount);

        // Run the function once when the page loads in case the textarea
        // already has some text in it (e.g., filled by the server or browser cache).
        updateCharacterCount();
    </script>

    <partial name="_ValidationScriptsPartial" />

    <script>
        function copySummary() {
            const summaryStyle = "@Model.SummaryStyle";
            var summaryOutputId = "summary-output";
            if (summaryStyle == "rawjson") { 
                summaryOutputId = "summary-output-json";
            }
            const text = document.getElementById(summaryOutputId).textContent;
            const icon = document.getElementById("copy-icon");
            const label = document.getElementById("copy-text");

            // Sanity check
            if (!icon || !label) {
                console.error("Missing icon or label element!");
                return;
            }

            navigator.clipboard.writeText(text).then(() => {
                icon.className = "bi bi-clipboard-check-fill me-2";
                label.textContent = "Copied!";

                setTimeout(() => {
                    icon.className = "bi bi-clipboard me-2";
                    label.textContent = "Copy Summary to Clipboard";
                }, 1500);
            });
        }
    </script>
}
